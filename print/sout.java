// Самая простая команда:
System.out.println("Робот - друг человека"); // Этой командой можно вывести надпись Робот - друг человека

// Командами вывода на экран: 
// Для этого мы использовали объект System.out, и его методы print() и println().

// Вывести текст на экран можно с помощью функции print.
	// println — метод, который вызывается у сущности out, чтобы обозначить способ, с помощью которого информация будет выведена на консоль.
// Вывести текст на экран В НЕСКОЛЬКО СТРОК можно с помощью функции println.
// Для вывода на экран нескольких строк можно использовать, как и print(), так и println(), даже printf() можно. (2)

// print() — вывод переданной информации. В качестве аргументов может принимать числа, строки, другие объекты;
// printf() — форматированный вывод. Форматирует переданный текст, используя специальные строки и аргументы;
// println() — вывод переданной информации и перевод строки. В качестве аргументов может принимать числа, строки, другие объекты;

// Разница между print() и println() невелика: 
// единственное, чем отличается println(), так это тем, что он вместо нас добавит переход на новою строку, что и делает его популярнее print().

/**
* Для вывода текста на консоль мы обращаемся к статическому полю out класса System, 
* у которого вызываем метод println(), 
* и в качестве аргумента передаем объект класса String.
*/

  // Метод println()
  // Парметры метода println()
  // В круглых скобках в нее передаются параметры.
  // В зависимости от значенйи парметров, одна команда может выполнять разные действия.

System.out.println(1); // Выводит на экран число 1
System.out.println("Amigo"); // Выводит на экран надпись Amigo
System.out.println("Risha & Amigo"); // Выводит на экран надпись Risha & Amigo

// В конце каждой команды ставится точка с запятой;


// Программа из трех команд:
System.out.println("Робот - друг человека");
System.out.println("Робот - друг человека");
System.out.println("Робот - друг человека");

// Программа не может просто состоять из команд.
// Команды языка Java должны находиться внутри функций, а функции внутри классов.
// Например, диван не может быть сам по себе - он находится в какой-то комнате. Комната тоже не может существовать сама по себе - она находится в каком-то доме.

System.out.println("Amigo");
System.out.println("The");
System.out.println("Best");
// Output: 
// Amigo
// The
// Best
// Команда println() НЕ выводит текст с новой строки - она выводит текст на текущей строке, но делает так, чтобы следующий текст выводился с новой строки.
// Команда prinln() выводит на экран текст и затем добавляет СПЕЦИАЛЬНЫЙ СИМВОЛ ПЕРЕВОДА СТРОКИ, а в реузльтате следующий текст будет отображаться с начала новой строки.

System.out.print("Amigo");
System.out.println("The");
System.out.print("Best");
// Output: 
// AmigoThe
// Best

System.out.print("Amigo");
System.out.print("The");
System.out.print("Best");
// Output: AmigoTheBest

// Полностью написанная программа вместе с объявлением класса Amigo и методом main:
public class Amigo {
  public static void main (String[] args) {
    System.out.print("Amigo");
    System.out.print("The");
    System.out.print("Best");
  }
}


/*
Многострочный комментарий
*/
public class Home {
	public static void main (String[] args) {
		/*
		Сейчас мы выводим на экран фразу 'Amigo the Best'
		*/
		System.out.println("Amigo");
		System.out.println("the"); // вот тут еще один комментарий
		// При этом комментарием считается часть кода, начиная с пары символов // и до конца строки, где они расположены, т.е. второй пары символов, которые "закрывают комментария", нет.
		System.out.println("Best");
	}	
}
// Когда программа будет компилироваться, компилятор пропустит все, что находится между символами /* и */.
// Внутри комментария можно написать что угодно.
// Обычно в коде пишут различные комментарии к его неочевидным или сложным для понимания частям.
 
// Бывают комментарии на десятки строк: такие обычно пишут перед методами, описывая нюансы их работы.


// Вложенный цикл (цикл в цикле)

// Цикл while (с блоком команд) внутри другого цикла while
 while (условие внешнего цикла)
{
   while (условие внутреннего цикла)
   {
     блок команд
   }
}


/*
Задача 1. 
Допустим, мы хотим написать программу, которая бы выводила на экран 4 раза слово Мама. 
Цикл — это именно то, что нам нужно. 
И примерно так выглядел бы наш код:
*/
int  n = 0;
while (n < 4)
{
   System.out.println("Мама");
   n++;
}
// Output:
// На экран будут выведены 4 строки:
// Мама
// Мама
// Мама
// Мама


/*
Задача 2. 
Мы хотим написать программу, которая бы выводила в одну строку 5 букв А. Для этого нам опять нужен цикл. Вот как будет выглядеть этот код.
*/
int n = 0;
while (n < 5)
{
   System.out.print("A"); // Вместо println пишем print, иначе каждая буква A будет в отдельной строке.
   n++;
}
// На экран будет выведено:
// AAAAA


/*
Задача 3. 
Мы хотим вывести на экран прямоугольник из букв А размером в 4 строки и 5 столбцов. 
А вот для этого нам уже нужны вложенные циклы. 
Просто возьмем первый пример, где мы выводим 4 строки и заменим код по выводу одной строки на код из второго примера.
*/
int n = 0; // Внешний цикл использует переменную n для подсчета количества витков цикла.

while (n < 4)

   int m = 0;

// Внутренний цикл 
   while (m < 5) // Для подсчета количества витков цикла он использует переменную m.
{
   System.out.print("А"); // Нужно явно переносить курсор на следующую строчку, после того как отработал внутренний цикл. 
	// Иначе все буквы, которые выведет программа, будут в одной строке.
   m++;
}

   System.out.println();
   n++;

}
// На экран будет выведено:
// ААААА
// ААААА
// ААААА
// ААААА
